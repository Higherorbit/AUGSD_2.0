#!/bin/sh

':' //; exec "$(command -v nodejs || command -v node)" "$0" "$@"

let mongoose = require('mongoose');
let Promise = require('promise');
let data = require('./assets/data')
let fq = require('fuzzquire');
let config = require('../config');
let prompt = require('prompt');

let adminsModel = fq('schemas/admins');
let portalsModel = fq('schemas/portals');
let studentsModel = fq('schemas/students');
let coursesModel = fq('schemas/courses');

mongoose.connect(config.mongooseConnection, {});

let confirm = function () {
	return new Promise(function (resolve, reject) {
		console.log("This will destroy and rebuild the database. Enter 'YES' to continue.")
		prompt.start();
		prompt.get(['confirm'], function (err, result) {

			if (err) {
				console.log(err);
				console.log("**** Some error encountered. Terminating to prevent data loss ****");
				process.exit();
			}

			if (result.confirm !== 'YES') {
				console.log("Terminating .....");
				process.exit();
			} else {
				resolve();
			}

		});
	});
}

let dropCollections = function () {
	return new Promise(function (resolve, reject) {

		console.log("******** Destroying Database ********");

		let collections = ['admins', 'students', 'courses', 'feedbacks', 'portals'];

		collections.forEach(function (collection) {
			console.log("	Dropping ", collection);
			mongoose.connection.db.dropCollection(collection, function (err, result) {
				if (err) {
					return reject(err);
				}
				return;
			});
		});
		return resolve();
	});
};
/*
# let createSuperUsers = function () {
# 	return new Promise(function (resolve, reject) {
# 		console.log("******** Creating SuperUsers ********");
# 		adminsModel.create(data.superUsers, function (err, result) {
# 			if (err) {
# 				return reject(err);
# 			}
# 			return resolve();
# 		});
# 	});
# };
*/
let createSuperUsers = function () {
  return new Promise(function (resolve, reject) {
    console.log("******** Creating SuperUsers ********");
    adminsModel.create(data.superUsers, function (err, result) {
      if (err) {
        console.log("Error creating superusers:", err);
        return reject(err); // Ensure errors are logged and the promise is rejected
      }
      console.log("Superusers created successfully");
      return resolve(); // Ensure the promise is resolved
    });
  });
};

let createPortals = function () {
	return new Promise(function (resolve, reject) {
		console.log("******** Creating Portals ********");
		portalsModel.create(data.portals, function (err, result) {
			if (err) {
				return reject(err);
			}
			return resolve();
		});
	});
};

let createStudents = function () {
	return new Promise(function (resolve, reject) {
		console.log("******** Creating Students ********");

		data.superUsers.forEach(function (user) {
			studentsModel.create({
				name: user.name,
				email: user.email,
				idNumber: user.email.split('@')[0],
				courses: [{
						courseID: "TEST F111",
						sections: ["L1"]
					},
					{
						courseID: "TEST F222",
						sections: ["L1"]
					},
					{
						courseID: "DEV F111",
						sections: ["L1", "T1"]
					}
				]
			}, function (err, result) {
				if (err) {
					console.log(err);
					return reject(err);
				}
				return;
			});
		});
		return resolve();
	});
};

let createCourses = function () {
	return new Promise(function (resolve, reject) {
		console.log("******** Creating Courses ********");
		adminsModel.distinct('email', {}, function (err, emails) {
			coursesModel.create([{
					courseID: "TEST F111",
					name: "Test Course 1",
					sections: [{
						section: "L1",
						instructors: emails
					}]
				},
				{
					courseID: "TEST F222",
					name: "Test Course 2",
					sections: [{
						section: "L1",
						instructors: emails
					}]
				},
				{
					courseID: "DEV F111",
					name: "Dev Course 1",
					sections: [{
						section: "L1",
						instructors: emails
					}, {
						section: "T1",
						instructors: emails
					}]
				}
			], function (err, result) {
				if (err) {
					console.log(err);
					reject(err);
				}
				resolve();
			});
		});
	});
};

mongoose.connection.on('open', function (ref) {
	confirm().then(dropCollections).then(createSuperUsers).then(createPortals).then(createStudents).then(createCourses).then(function () {
		console.log("******** Done ********");
		process.exit();
	});
});
